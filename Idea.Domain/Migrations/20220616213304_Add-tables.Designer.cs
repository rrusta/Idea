// <auto-generated />
using System;
using Idea.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Idea.Domain.Migrations
{
    [DbContext(typeof(IdeaDbContext))]
    [Migration("20220616213304_Add-tables")]
    partial class Addtables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Idea.Domain.Models.AttachmentsMetaData", b =>
                {
                    b.Property<int>("AttachmentsMetaDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentsMetaDataId"), 1L, 1);

                    b.Property<string>("AttachmentFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AttachmentSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttachmentsMetaDataId");

                    b.HasIndex("AttachmentTypeId");

                    b.ToTable("AttachmentsMetaData");
                });

            modelBuilder.Entity("Idea.Domain.Models.AttachmentTypes", b =>
                {
                    b.Property<int>("AttachmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttachmentTypeId");

                    b.ToTable("AttachmentTypes");
                });

            modelBuilder.Entity("Idea.Domain.Models.DistancesFromLocationRange", b =>
                {
                    b.Property<int>("DistanceFromLocationRangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistanceFromLocationRangeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistanceFrom")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceTo")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("DistanceFromLocationRangeId");

                    b.HasIndex("UnitId");

                    b.ToTable("DistancesFromLocationRange");
                });

            modelBuilder.Entity("Idea.Domain.Models.Districts", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"), 1L, 1);

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Idea.Domain.Models.EmailTemplates", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailTemplateId"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBodyHtml")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("Idea.Domain.Models.FavoritePublications", b =>
                {
                    b.Property<int>("FavoritePublicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoritePublicationId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FavoritePublicationId");

                    b.HasIndex("PublicationId");

                    b.ToTable("FavoritePublications");
                });

            modelBuilder.Entity("Idea.Domain.Models.OperatorSettings", b =>
                {
                    b.Property<int>("OperatorSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperatorSettingsId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("Smtp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperatorSettingsId");

                    b.ToTable("OperatorSettings");
                });

            modelBuilder.Entity("Idea.Domain.Models.PhonePrefixes", b =>
                {
                    b.Property<int>("PhonePrefixId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhonePrefixId"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhonePrefixId");

                    b.ToTable("PhonePrefixes");
                });

            modelBuilder.Entity("Idea.Domain.Models.PriceSearchFilters", b =>
                {
                    b.Property<int>("PriceSearchFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceSearchFilterId"), 1L, 1);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("PriceSearchFilterId");

                    b.ToTable("PriceSearchFilters");
                });

            modelBuilder.Entity("Idea.Domain.Models.PublicationCategories", b =>
                {
                    b.Property<int>("PublicationCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicationCategoryId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasArea")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasQuadrature")
                        .HasColumnType("bit");

                    b.Property<int>("PublicationMainCategoryId")
                        .HasColumnType("int");

                    b.Property<bool?>("ShowFirst")
                        .HasColumnType("bit");

                    b.HasKey("PublicationCategoryId");

                    b.HasIndex("PublicationMainCategoryId");

                    b.ToTable("PublicationCategories");
                });

            modelBuilder.Entity("Idea.Domain.Models.PublicationCategoriesProperties", b =>
                {
                    b.Property<int>("PublicationCategoriesPropertiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicationCategoriesPropertiesId"), 1L, 1);

                    b.Property<string>("HasProperty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublicationCategoryId")
                        .HasColumnType("int");

                    b.HasKey("PublicationCategoriesPropertiesId");

                    b.HasIndex("PublicationCategoryId");

                    b.ToTable("PublicationCategoriesProperties");
                });

            modelBuilder.Entity("Idea.Domain.Models.PublicationMainCategories", b =>
                {
                    b.Property<int>("PublicationMainCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicationMainCategoryId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublicationMainCategoryId");

                    b.ToTable("PublicationMainCategories");
                });

            modelBuilder.Entity("Idea.Domain.Models.PublicationPublishedRange", b =>
                {
                    b.Property<int>("PublicationPublishedRangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicationPublishedRangeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PublishedFrom")
                        .HasColumnType("int");

                    b.Property<int?>("PublishedTo")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("PublicationPublishedRangeId");

                    b.HasIndex("UnitId");

                    b.ToTable("PublicationPublishedRange");
                });

            modelBuilder.Entity("Idea.Domain.Models.PublicationRejectionReasons", b =>
                {
                    b.Property<int>("PublicationRejectionReasonsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicationRejectionReasonsId"), 1L, 1);

                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.Property<int>("RejectionReasonId")
                        .HasColumnType("int");

                    b.HasKey("PublicationRejectionReasonsId");

                    b.HasIndex("PublicationId");

                    b.HasIndex("RejectionReasonId");

                    b.ToTable("PublicationRejectionReasons");
                });

            modelBuilder.Entity("Idea.Domain.Models.Publications", b =>
                {
                    b.Property<int>("PublicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicationId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressEntry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AddressLatitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AddressLongitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AddressObject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AreaUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("BathroomsNumber")
                        .HasColumnType("int");

                    b.Property<int?>("BedroomsNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("ByAgreement")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasAirConditioner")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasBalcony")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasCentralHeating")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasClothesWasher")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasDishWasher")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasElectricCentralHeating")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasElevator")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasInternet")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasPrivateGarage")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasPublicParking")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasRollerShutters")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasSwimmingPool")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasTV")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasTerrace")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("KitchenNumber")
                        .HasColumnType("int");

                    b.Property<int?>("KitchenRoomNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ParentPublicationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhonePrefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PriceUnitId")
                        .HasColumnType("int");

                    b.Property<int>("PublicationCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PublicationStateId")
                        .HasColumnType("int");

                    b.Property<int>("PublicationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("PublicationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quadrature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("QuadratureUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomsNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViberPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViberPrefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WarehouseroomsNumber")
                        .HasColumnType("int");

                    b.Property<string>("WhatsappPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsappPrefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublicationId");

                    b.HasIndex("AreaUnitId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ParentPublicationId");

                    b.HasIndex("PriceUnitId");

                    b.HasIndex("PublicationCategoryId");

                    b.HasIndex("PublicationStateId");

                    b.HasIndex("PublicationStatusId");

                    b.HasIndex("PublicationTypeId");

                    b.HasIndex("PublisherTypeId");

                    b.HasIndex("QuadratureUnitId");

                    b.HasIndex("TownId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("Idea.Domain.Models.PublicationStates", b =>
                {
                    b.Property<int>("PublicationStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicationStateId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublicationStateId");

                    b.ToTable("PublicationStates");
                });

            modelBuilder.Entity("Idea.Domain.Models.PublicationStatuses", b =>
                {
                    b.Property<int>("PublicationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicationStatusId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublicationStatusId");

                    b.ToTable("PublicationStatuses");
                });

            modelBuilder.Entity("Idea.Domain.Models.PublicationTypes", b =>
                {
                    b.Property<int>("PublicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicationTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublicationTypeId");

                    b.ToTable("PublicationTypes");
                });

            modelBuilder.Entity("Idea.Domain.Models.PublisherTypes", b =>
                {
                    b.Property<int>("PublisherTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherTypeId");

                    b.ToTable("PublisherTypes");
                });

            modelBuilder.Entity("Idea.Domain.Models.QuadraturesRange", b =>
                {
                    b.Property<int>("QuadratureRangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuadratureRangeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuadratureFrom")
                        .HasColumnType("int");

                    b.Property<int?>("QuadratureTo")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("QuadratureRangeId");

                    b.HasIndex("UnitId");

                    b.ToTable("QuadraturesRange");
                });

            modelBuilder.Entity("Idea.Domain.Models.RejectionReasons", b =>
                {
                    b.Property<int>("RejectionReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RejectionReasonId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RejectionReasonId");

                    b.ToTable("RejectionReasons");
                });

            modelBuilder.Entity("Idea.Domain.Models.RoomsNumberSearchFilters", b =>
                {
                    b.Property<int>("RoomsNumberSearchFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomsNumberSearchFilterId"), 1L, 1);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("RoomsNumberSearchFilterId");

                    b.ToTable("RoomsNumberSearchFilters");
                });

            modelBuilder.Entity("Idea.Domain.Models.Settings", b =>
                {
                    b.Property<int>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingsId"), 1L, 1);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingsId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Idea.Domain.Models.SortOrder", b =>
                {
                    b.Property<int>("SortOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SortOrderId"), 1L, 1);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SortOrderId");

                    b.ToTable("SortOrder");
                });

            modelBuilder.Entity("Idea.Domain.Models.Towns", b =>
                {
                    b.Property<int>("TownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TownId"), 1L, 1);

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TownCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TownId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("Idea.Domain.Models.Units", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitTypeId")
                        .HasColumnType("int");

                    b.HasKey("UnitId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Idea.Domain.Models.UnitTypes", b =>
                {
                    b.Property<int>("UnitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitTypeId");

                    b.ToTable("UnitTypes");
                });

            modelBuilder.Entity("Idea.Domain.Models.UserTypes", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("Idea.Domain.Models.WatchedPublications", b =>
                {
                    b.Property<int>("WatchedPublicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WatchedPublicationId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WatchedPublicationId");

                    b.HasIndex("PublicationId");

                    b.ToTable("WatchedPublications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Idea.Domain.Models.AttachmentsMetaData", b =>
                {
                    b.HasOne("Idea.Domain.Models.AttachmentTypes", "AttachmentType")
                        .WithMany()
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachmentType");
                });

            modelBuilder.Entity("Idea.Domain.Models.DistancesFromLocationRange", b =>
                {
                    b.HasOne("Idea.Domain.Models.Units", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Idea.Domain.Models.FavoritePublications", b =>
                {
                    b.HasOne("Idea.Domain.Models.Publications", "Publication")
                        .WithMany()
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("Idea.Domain.Models.PublicationCategories", b =>
                {
                    b.HasOne("Idea.Domain.Models.PublicationMainCategories", "PublicationMainCategory")
                        .WithMany()
                        .HasForeignKey("PublicationMainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicationMainCategory");
                });

            modelBuilder.Entity("Idea.Domain.Models.PublicationCategoriesProperties", b =>
                {
                    b.HasOne("Idea.Domain.Models.PublicationCategories", "PublicationCategory")
                        .WithMany()
                        .HasForeignKey("PublicationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicationCategory");
                });

            modelBuilder.Entity("Idea.Domain.Models.PublicationPublishedRange", b =>
                {
                    b.HasOne("Idea.Domain.Models.Units", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Idea.Domain.Models.PublicationRejectionReasons", b =>
                {
                    b.HasOne("Idea.Domain.Models.Publications", "Publication")
                        .WithMany()
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea.Domain.Models.RejectionReasons", "RejectionReason")
                        .WithMany()
                        .HasForeignKey("RejectionReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("RejectionReason");
                });

            modelBuilder.Entity("Idea.Domain.Models.Publications", b =>
                {
                    b.HasOne("Idea.Domain.Models.Units", "AreaUnit")
                        .WithMany()
                        .HasForeignKey("AreaUnitId");

                    b.HasOne("Idea.Domain.Models.Districts", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea.Domain.Models.Publications", "ParentPublication")
                        .WithMany()
                        .HasForeignKey("ParentPublicationId");

                    b.HasOne("Idea.Domain.Models.Units", "PriceUnit")
                        .WithMany()
                        .HasForeignKey("PriceUnitId");

                    b.HasOne("Idea.Domain.Models.PublicationCategories", "PublicationCategory")
                        .WithMany()
                        .HasForeignKey("PublicationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea.Domain.Models.PublicationStates", "PublicationState")
                        .WithMany()
                        .HasForeignKey("PublicationStateId");

                    b.HasOne("Idea.Domain.Models.PublicationStatuses", "PublicationStatus")
                        .WithMany()
                        .HasForeignKey("PublicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea.Domain.Models.PublicationTypes", "PublicationType")
                        .WithMany()
                        .HasForeignKey("PublicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea.Domain.Models.PublisherTypes", "PublisherType")
                        .WithMany()
                        .HasForeignKey("PublisherTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea.Domain.Models.Units", "QuadratureUnit")
                        .WithMany()
                        .HasForeignKey("QuadratureUnitId");

                    b.HasOne("Idea.Domain.Models.Towns", "Town")
                        .WithMany()
                        .HasForeignKey("TownId");

                    b.Navigation("AreaUnit");

                    b.Navigation("District");

                    b.Navigation("ParentPublication");

                    b.Navigation("PriceUnit");

                    b.Navigation("PublicationCategory");

                    b.Navigation("PublicationState");

                    b.Navigation("PublicationStatus");

                    b.Navigation("PublicationType");

                    b.Navigation("PublisherType");

                    b.Navigation("QuadratureUnit");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("Idea.Domain.Models.QuadraturesRange", b =>
                {
                    b.HasOne("Idea.Domain.Models.Units", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Idea.Domain.Models.Towns", b =>
                {
                    b.HasOne("Idea.Domain.Models.Districts", "District")
                        .WithMany("Towns")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Idea.Domain.Models.Units", b =>
                {
                    b.HasOne("Idea.Domain.Models.UnitTypes", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("Idea.Domain.Models.WatchedPublications", b =>
                {
                    b.HasOne("Idea.Domain.Models.Publications", "Publication")
                        .WithMany()
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Idea.Domain.Models.Districts", b =>
                {
                    b.Navigation("Towns");
                });
#pragma warning restore 612, 618
        }
    }
}
